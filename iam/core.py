"""Handle core functions of the bot."""

from inspect import getdoc
# from discord.ext.commands import (
#     Cog,
#     Group,
#     command,
#     BadArgument,
#     MissingRequiredArgument,
#     TooManyArguments,
#     ArgumentParsingError,
# )
from nextcord.ext.commands import (
    Cog,
    Group,
    command,
    BadArgument,
    MissingRequiredArgument,
    TooManyArguments,
    ArgumentParsingError
)

from iam.log import new_logger
from iam.config import PREFIX, ADMIN_CHANNEL
from iam.hooks import pre, post, log_invoke, log_success

LOG = new_logger(__name__)
"""Logger for this module."""

COG_NAME = "Core"
"""Name of this module's Cog."""


def setup(bot):
    """Add Core cog to bot and set up logging.

    Args:
        bot: Bot object to add cog to.
    """
    LOG.debug(f"Setting up {__name__} extension...")
    cog = Core(bot, LOG)
    LOG.debug(f"Initialised {COG_NAME} cog")
    bot.add_cog(cog)
    LOG.debug(f"Added {COG_NAME} cog to bot")


def teardown(bot):
    """Remove Core cog from bot and remove logging.

    Args:
        bot: Bot object to remove cog from.
    """
    LOG.debug(f"Tearing down {__name__} extension...")
    bot.remove_cog(COG_NAME)
    LOG.debug(f"Removed {COG_NAME} cog from bot")
    for handler in LOG.handlers:
        LOG.removeHandler(handler)


async def show_help_all(bot, target):
    """Send help text for all commands to target.

    Args:
        bot: Bot to generate help text for.
        target: Object to send message to.
    """
    out = ["**All commands:**"] + [
        make_help_text(cmd) for cmd in bot.commands if not cmd.hidden
    ]
    await target.send("\n".join(out))


async def show_help_single(bot, target, query):
    """Send help text for queried command to target.

    If no such command exists or command is hidden, send error message.

    Args:
        bot: Bot to generate help text for.
        target: Object to send message to.
        query: String representing command to search for.
    """
    cmd = bot.get_command(query)
    if cmd is None or cmd.hidden:
        await target.send("No such command exists!")
        return
    await target.send(f"Usage: {make_help_text(cmd)}")


class Core(Cog, name=COG_NAME):
    """Handle core functions of the bot.

    Attributes:
        bot: Bot object that registered this cog.
    """

    def __init__(self, bot, logger):
        """Initialise cog with given bot.

        Args:
            bot: Bot object that registered this cog.
        """
        LOG.debug(f"Initialising {COG_NAME} cog...")
        self.bot = bot
        self.logger = logger
        self.bot.remove_command("help")

    @Cog.listener()
    async def on_ready(self):
        """Log message on bot startup."""
        LOG.info(f"Bot running with command prefix '{PREFIX}'")

    @Cog.listener()
    async def on_command_error(self, ctx, error):
        """Handle exceptions raised by commands.

        If exception is related to incorrect command usage, attempt to display
        help for that command.

        Args:
            ctx: Context object associated with event/command that raised.
            error: CommandError object generated by discord.py
        """
        if (
                isinstance(error, MissingRequiredArgument)
                or isinstance(error, TooManyArguments)
                or isinstance(error, ArgumentParsingError)
                or isinstance(error, BadArgument)
        ) and ctx.channel.id == ADMIN_CHANNEL:
            await show_help_single(self.bot, ctx, ctx.command.qualified_name)

    @command(name="help", help="Display this help dialogue.", usage="")
    @pre(log_invoke(LOG))
    @post(log_success(LOG))
    async def cmd_help(self, ctx, *query):
        """Handle help command.

        If no query is given, display list of all commands, their usage,
        aliases and subcommands.

        If query is given, only display help for that command.

        Does not display help for commands with hidden attribute set to False.

        Args:
            ctx: Context object associated with command invocation.
            query: String representing name of command to display help for.
                   Optional.
        """
        if len(query) == 0:
            await show_help_all(self.bot, ctx)
        else:
            await show_help_single(self.bot, ctx, " ".join(query))


def make_help_text(cmd):
    """Generate help text for command.

    Help text will look as follows:
    **(command name) (usage)**
    (command help)
    __Aliases__ | (alias1) | (alias2) | etc.
    __Subcommands__ | (subcommand1) | (subcommand 2) etc.

    Command object should define help and usage attributes for this to work.

    Args:
        cmd: Command object to generate help text for.

    Returns:
        String representing generated help text.
    """
    help = [f"**{PREFIX}{cmd.qualified_name}** {cmd.usage}", cmd.help]

    # Append aliases.
    if len(cmd.aliases) > 0:
        aliases = ["__Aliases__"]
        aliases += [f"{PREFIX}{a}" for a in cmd.aliases]
        help.append(" | ".join(aliases))

    # Append subcommands.
    if isinstance(cmd, Group) and len(cmd.commands) > 0:
        subs = ["__Subcommands__"]
        subs += [f"{PREFIX}{c.qualified_name}" for c in cmd.commands]
        help.append(" | ".join(subs))

    return "\n".join(help)
